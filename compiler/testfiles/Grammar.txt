$ 终结符
$ ID 为标识符 num 为数字
; , { } ( ) + - * / = < == > >= <= != int void if else while return ID num

$ 变元
S' AddSubExp Args AssignStmt Block CallFunCheck CallStmt CreateFunTable_m Def DefList Exp ExtDef ExtDefList Factor FunDec FunSpecifier IfNext IfStmt IfStmt_m1 IfStmt_m2 IfStmt_next Item ParamDec Program Relop ReturnStmt Stmt StmtList VarList VarSpecifier WhileStmt WhileStmt_m1 WhileStmt_m2 

$ 文法起始符号
S'

$ 扩展文法产生式
S'->Program

$ 整个程序为多个声明串的组合
Program->ExtDefList

$ 声明串
ExtDefList->ExtDef ExtDefList
ExtDefList->@

ExtDef->VarSpecifier ID ;
ExtDef->FunSpecifier FunDec Block

VarSpecifier->int

FunSpecifier->void
FunSpecifier->int

FunDec->ID CreateFunTable_m ( VarList )
CreateFunTable_m->@

VarList->ParamDec , VarList
VarList->ParamDec
VarList->void
VarList->@

ParamDec->VarSpecifier ID

Block->{ DefList StmtList }

DefList->Def DefList
DefList->@
Def->VarSpecifier ID ;

StmtList->Stmt StmtList
StmtList->@
Stmt->AssignStmt ;
Stmt->ReturnStmt ;
Stmt->IfStmt
Stmt->WhileStmt
Stmt->CallStmt ;

AssignStmt->ID = Exp

Exp->AddSubExp
Exp->Exp Relop AddSubExp

AddSubExp->Item
AddSubExp->Item + Item
AddSubExp->Item - Item

Item->Factor
Item->Factor * Factor
Item->Factor / Factor

Factor->num
Factor->( Exp )
Factor->ID
Factor->CallStmt

CallStmt->ID ( CallFunCheck Args )
CallFunCheck->@

Args->Exp , Args
Args->Exp
Args->@

ReturnStmt->return Exp
ReturnStmt->return

Relop->>
Relop-><
Relop->>=
Relop-><=
Relop->==
Relop->!=

IfStmt->if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfNext
IfStmt_m1->@
IfStmt_m2->@

IfNext->@
IfNext->IfStmt_next else Block
IfStmt_next->@

WhileStmt->while WhileStmt_m1 ( Exp ) WhileStmt_m2 Block
WhileStmt_m1->@
WhileStmt_m2->@
#

id ( ) -
Expr ExprTail Var VarTail S'
S'

S'->Expr
Expr->- Expr
Expr->( Expr )
Expr->Var ExprTail
ExprTail->- Expr
ExprTail->@
Var->id VarTail
VarTail->( Expr )
VarTail->@
#


