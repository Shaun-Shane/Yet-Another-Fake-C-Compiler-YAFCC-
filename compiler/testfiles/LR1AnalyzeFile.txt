
status                                                      sign                                                        input
0                                                           #                                                           int ID ( int ID , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 6                                                         # int                                                       ID ( int ID , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3                                                         # FunSpecifier                                              ID ( int ID , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10                                                      # FunSpecifier ID                                           ( int ID , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14                                                   # FunSpecifier ID CreateFunTable_m                          ( int ID , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20                                                # FunSpecifier ID CreateFunTable_m (                        int ID , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 19                                             # FunSpecifier ID CreateFunTable_m ( int                    ID , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 36                                             # FunSpecifier ID CreateFunTable_m ( VarSpecifier           ID , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 36 58                                          # FunSpecifier ID CreateFunTable_m ( VarSpecifier ID        , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34                                             # FunSpecifier ID CreateFunTable_m ( ParamDec               , int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56                                          # FunSpecifier ID CreateFunTable_m ( ParamDec ,             int ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 19                                       # FunSpecifier ID CreateFunTable_m ( ParamDec , int         ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 36                                       # FunSpecifier ID CreateFunTable_m ( ParamDec , VarSpecifier ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 36 58                                    # FunSpecifier ID CreateFunTable_m ( ParamDec , VarSpecifier ID , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 34                                       # FunSpecifier ID CreateFunTable_m ( ParamDec , ParamDec    , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 34 56                                    # FunSpecifier ID CreateFunTable_m ( ParamDec , ParamDec ,  int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 34 56 19                                 # FunSpecifier ID CreateFunTable_m ( ParamDec , ParamDec , int ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 34 56 36                                 # FunSpecifier ID CreateFunTable_m ( ParamDec , ParamDec , VarSpecifier ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 34 56 36 58                              # FunSpecifier ID CreateFunTable_m ( ParamDec , ParamDec , VarSpecifier ID ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 34 56 34                                 # FunSpecifier ID CreateFunTable_m ( ParamDec , ParamDec , ParamDec ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 34 56 83                                 # FunSpecifier ID CreateFunTable_m ( ParamDec , ParamDec , VarList ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 34 56 83                                       # FunSpecifier ID CreateFunTable_m ( ParamDec , VarList     ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 35                                             # FunSpecifier ID CreateFunTable_m ( VarList                ) { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 10 14 20 35 57                                          # FunSpecifier ID CreateFunTable_m ( VarList )              { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9                                                       # FunSpecifier FunDec                                       { int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13                                                    # FunSpecifier FunDec {                                     int ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 19                                                 # FunSpecifier FunDec { int                                 ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 18                                                 # FunSpecifier FunDec { VarSpecifier                        ID ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 18 33                                              # FunSpecifier FunDec { VarSpecifier ID                     ; int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 18 33 55                                           # FunSpecifier FunDec { VarSpecifier ID ;                   int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 16                                                 # FunSpecifier FunDec { Def                                 int ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 16 19                                              # FunSpecifier FunDec { Def int                             ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 16 18                                              # FunSpecifier FunDec { Def VarSpecifier                    ID ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 16 18 33                                           # FunSpecifier FunDec { Def VarSpecifier ID                 ; ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 16 18 33 55                                        # FunSpecifier FunDec { Def VarSpecifier ID ;               ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 16 16                                              # FunSpecifier FunDec { Def Def                             ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 16 16 21                                           # FunSpecifier FunDec { Def Def DefList                     ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 16 21                                              # FunSpecifier FunDec { Def DefList                         ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17                                                 # FunSpecifier FunDec { DefList                             ID = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 29                                              # FunSpecifier FunDec { DefList ID                          = num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 29 44                                           # FunSpecifier FunDec { DefList ID =                        num ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 29 44 53                                        # FunSpecifier FunDec { DefList ID = num                    ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 29 44 49                                        # FunSpecifier FunDec { DefList ID = Factor                 ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 29 44 50                                        # FunSpecifier FunDec { DefList ID = Item                   ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 29 44 46                                        # FunSpecifier FunDec { DefList ID = AddSubExp              ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 29 44 60                                        # FunSpecifier FunDec { DefList ID = Exp                    ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 22                                              # FunSpecifier FunDec { DefList AssignStmt                  ; if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 22 38                                           # FunSpecifier FunDec { DefList AssignStmt ;                if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26                                              # FunSpecifier FunDec { DefList Stmt                        if ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30                                           # FunSpecifier FunDec { DefList Stmt if                     ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45                                        # FunSpecifier FunDec { DefList Stmt if IfStmt_m1           ( ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61                                     # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 (         ID > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 79                                  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( ID      > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 76                                  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Factor  > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 77                                  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Item    > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 73                                  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( AddSubExp > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93                                  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp     > ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 67                               # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp >   ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108                              # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78                           # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 79                        # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( ID + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 76                        # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( Factor + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 77                        # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( Item + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 77 112                    # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( Item + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 77 112 145                # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( Item + ID ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 77 112 142                # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( Item + Factor ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 77 112 143                # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( Item + Item ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 73                        # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( AddSubExp ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 114                       # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( Exp ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 78 114 148                   # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop ( Exp ) ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 76                           # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop Factor ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 77                           # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop Item ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 108 134                          # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp Relop AddSubExp ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93                                  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp     ) { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127                              # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp )   { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169                          # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197                      # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228                  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29               # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44            # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 52         # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = ID + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 49         # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Factor + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50         # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71      # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 79 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( ID * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 76 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Factor * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 76 110 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Factor * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 76 110 138 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Factor * ID + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 76 110 136 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Factor * Factor + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 77 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Item + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 77 112 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Item + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 77 112 146 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Item + num ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 77 112 142 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Item + Factor ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 77 112 143 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Item + Item ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 73 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( AddSubExp ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 132 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Exp ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 104 132 178 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + ( Exp ) ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 102  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + Factor ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 50 71 103  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Item + Item ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 46         # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = AddSubExp ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 29 44 60         # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList ID = Exp ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 22               # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList AssignStmt ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 22 38            # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList AssignStmt ; } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 26               # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList Stmt } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 26 41            # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList Stmt StmtList } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 243              # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList StmtList } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 197 228 243 255          # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 { DefList StmtList } else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196                      # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227                  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242              # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214          # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237      # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 29   # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 29 44 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 29 44 52 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList ID = ID ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 29 44 49 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList ID = Factor ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 29 44 50 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList ID = Item ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 29 44 46 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList ID = AddSubExp ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 29 44 60 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList ID = Exp ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 22   # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList AssignStmt ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 22 38 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList AssignStmt ; } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 26   # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList Stmt } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 26 41 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList Stmt StmtList } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 249  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList StmtList } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 214 237 249 258 # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else { DefList StmtList } while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 227 242 254          # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfStmt_next else Block while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 30 45 61 93 127 169 196 226                  # FunSpecifier FunDec { DefList Stmt if IfStmt_m1 ( Exp ) IfStmt_m2 Block IfNext while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 24                                           # FunSpecifier FunDec { DefList Stmt IfStmt                 while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26                                           # FunSpecifier FunDec { DefList Stmt Stmt                   while ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32                                        # FunSpecifier FunDec { DefList Stmt Stmt while             ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54                                     # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82                                  # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 79                               # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( ID <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 76                               # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Factor <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 77                               # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Item <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 73                               # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( AddSubExp <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117                              # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 65                           # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp <= num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 108                          # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp Relop num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 108 80                       # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp Relop num ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 108 76                       # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp Relop Factor ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 108 77                       # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp Relop Item ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 108 134                      # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp Relop AddSubExp ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117                              # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151                          # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188                      # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214                  # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237              # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29           # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29 44        # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29 44 52     # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = ID * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29 44 49     # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = Factor * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29 44 49 69  # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = Factor * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29 44 49 69 99 # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = Factor * num ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29 44 49 69 96 # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = Factor * Factor ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29 44 50     # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = Item ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29 44 46     # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = AddSubExp ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 29 44 60     # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList ID = Exp ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 22           # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList AssignStmt ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 22 38        # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList AssignStmt ; } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 26           # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList Stmt } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 26 41        # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList Stmt StmtList } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 249          # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList StmtList } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 214 237 249 258      # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 { DefList StmtList } return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 32 54 82 117 151 188 213                  # FunSpecifier FunDec { DefList Stmt Stmt while WhileStmt_m1 ( Exp ) WhileStmt_m2 Block return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 28                                        # FunSpecifier FunDec { DefList Stmt Stmt WhileStmt         return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26                                        # FunSpecifier FunDec { DefList Stmt Stmt Stmt              return ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 31                                     # FunSpecifier FunDec { DefList Stmt Stmt Stmt return       ID ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 31 52                                  # FunSpecifier FunDec { DefList Stmt Stmt Stmt return ID    ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 31 49                                  # FunSpecifier FunDec { DefList Stmt Stmt Stmt return Factor ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 31 50                                  # FunSpecifier FunDec { DefList Stmt Stmt Stmt return Item  ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 31 46                                  # FunSpecifier FunDec { DefList Stmt Stmt Stmt return AddSubExp ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 31 48                                  # FunSpecifier FunDec { DefList Stmt Stmt Stmt return Exp   ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 25                                     # FunSpecifier FunDec { DefList Stmt Stmt Stmt ReturnStmt   ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 25 40                                  # FunSpecifier FunDec { DefList Stmt Stmt Stmt ReturnStmt ; } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 26                                     # FunSpecifier FunDec { DefList Stmt Stmt Stmt Stmt         } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 26 41                                  # FunSpecifier FunDec { DefList Stmt Stmt Stmt Stmt StmtList } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 26 41                                     # FunSpecifier FunDec { DefList Stmt Stmt Stmt StmtList     } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 26 41                                        # FunSpecifier FunDec { DefList Stmt Stmt StmtList          } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 26 41                                           # FunSpecifier FunDec { DefList Stmt StmtList               } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 27                                              # FunSpecifier FunDec { DefList StmtList                    } int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 13 17 27 42                                           # FunSpecifier FunDec { DefList StmtList }                  int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 3 9 12                                                    # FunSpecifier FunDec Block                                 int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1                                                         # ExtDef                                                    int ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 6                                                       # ExtDef int                                                ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3                                                       # ExtDef FunSpecifier                                       ID ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 10                                                    # ExtDef FunSpecifier ID                                    ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 10 14                                                 # ExtDef FunSpecifier ID CreateFunTable_m                   ( int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 10 14 20                                              # ExtDef FunSpecifier ID CreateFunTable_m (                 int ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 10 14 20 19                                           # ExtDef FunSpecifier ID CreateFunTable_m ( int             ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 10 14 20 36                                           # ExtDef FunSpecifier ID CreateFunTable_m ( VarSpecifier    ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 10 14 20 36 58                                        # ExtDef FunSpecifier ID CreateFunTable_m ( VarSpecifier ID ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 10 14 20 34                                           # ExtDef FunSpecifier ID CreateFunTable_m ( ParamDec        ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 10 14 20 35                                           # ExtDef FunSpecifier ID CreateFunTable_m ( VarList         ) { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 10 14 20 35 57                                        # ExtDef FunSpecifier ID CreateFunTable_m ( VarList )       { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9                                                     # ExtDef FunSpecifier FunDec                                { ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13                                                  # ExtDef FunSpecifier FunDec {                              ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17                                               # ExtDef FunSpecifier FunDec { DefList                      ID = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29                                            # ExtDef FunSpecifier FunDec { DefList ID                   = ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44                                         # ExtDef FunSpecifier FunDec { DefList ID =                 ID + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44 52                                      # ExtDef FunSpecifier FunDec { DefList ID = ID              + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44 49                                      # ExtDef FunSpecifier FunDec { DefList ID = Factor          + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44 50                                      # ExtDef FunSpecifier FunDec { DefList ID = Item            + num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44 50 71                                   # ExtDef FunSpecifier FunDec { DefList ID = Item +          num ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44 50 71 106                               # ExtDef FunSpecifier FunDec { DefList ID = Item + num      ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44 50 71 102                               # ExtDef FunSpecifier FunDec { DefList ID = Item + Factor   ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44 50 71 103                               # ExtDef FunSpecifier FunDec { DefList ID = Item + Item     ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44 46                                      # ExtDef FunSpecifier FunDec { DefList ID = AddSubExp       ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 29 44 60                                      # ExtDef FunSpecifier FunDec { DefList ID = Exp             ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 22                                            # ExtDef FunSpecifier FunDec { DefList AssignStmt           ; return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 22 38                                         # ExtDef FunSpecifier FunDec { DefList AssignStmt ;         return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26                                            # ExtDef FunSpecifier FunDec { DefList Stmt                 return ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 31                                         # ExtDef FunSpecifier FunDec { DefList Stmt return          ID * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 31 52                                      # ExtDef FunSpecifier FunDec { DefList Stmt return ID       * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 31 49                                      # ExtDef FunSpecifier FunDec { DefList Stmt return Factor   * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 31 49 69                                   # ExtDef FunSpecifier FunDec { DefList Stmt return Factor * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 31 49 69 99                                # ExtDef FunSpecifier FunDec { DefList Stmt return Factor * num ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 31 49 69 96                                # ExtDef FunSpecifier FunDec { DefList Stmt return Factor * Factor ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 31 50                                      # ExtDef FunSpecifier FunDec { DefList Stmt return Item     ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 31 46                                      # ExtDef FunSpecifier FunDec { DefList Stmt return AddSubExp ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 31 48                                      # ExtDef FunSpecifier FunDec { DefList Stmt return Exp      ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 25                                         # ExtDef FunSpecifier FunDec { DefList Stmt ReturnStmt      ; } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 25 40                                      # ExtDef FunSpecifier FunDec { DefList Stmt ReturnStmt ;    } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 26                                         # ExtDef FunSpecifier FunDec { DefList Stmt Stmt            } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 26 41                                      # ExtDef FunSpecifier FunDec { DefList Stmt Stmt StmtList   } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 26 41                                         # ExtDef FunSpecifier FunDec { DefList Stmt StmtList        } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 27                                            # ExtDef FunSpecifier FunDec { DefList StmtList             } void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 13 17 27 42                                         # ExtDef FunSpecifier FunDec { DefList StmtList }           void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 3 9 12                                                  # ExtDef FunSpecifier FunDec Block                          void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1                                                       # ExtDef ExtDef                                             void ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 7                                                     # ExtDef ExtDef void                                        ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3                                                     # ExtDef ExtDef FunSpecifier                                ID ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 10                                                  # ExtDef ExtDef FunSpecifier ID                             ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 10 14                                               # ExtDef ExtDef FunSpecifier ID CreateFunTable_m            ( void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 10 14 20                                            # ExtDef ExtDef FunSpecifier ID CreateFunTable_m (          void ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 10 14 20 37                                         # ExtDef ExtDef FunSpecifier ID CreateFunTable_m ( void     ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 10 14 20 35                                         # ExtDef ExtDef FunSpecifier ID CreateFunTable_m ( VarList  ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 10 14 20 35 57                                      # ExtDef ExtDef FunSpecifier ID CreateFunTable_m ( VarList ) { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9                                                   # ExtDef ExtDef FunSpecifier FunDec                         { int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13                                                # ExtDef ExtDef FunSpecifier FunDec {                       int ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 19                                             # ExtDef ExtDef FunSpecifier FunDec { int                   ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 18                                             # ExtDef ExtDef FunSpecifier FunDec { VarSpecifier          ID ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 18 33                                          # ExtDef ExtDef FunSpecifier FunDec { VarSpecifier ID       ; int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 18 33 55                                       # ExtDef ExtDef FunSpecifier FunDec { VarSpecifier ID ;     int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16                                             # ExtDef ExtDef FunSpecifier FunDec { Def                   int ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 19                                          # ExtDef ExtDef FunSpecifier FunDec { Def int               ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 18                                          # ExtDef ExtDef FunSpecifier FunDec { Def VarSpecifier      ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 18 33                                       # ExtDef ExtDef FunSpecifier FunDec { Def VarSpecifier ID   ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 18 33 55                                    # ExtDef ExtDef FunSpecifier FunDec { Def VarSpecifier ID ; int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 16                                          # ExtDef ExtDef FunSpecifier FunDec { Def Def               int ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 16 19                                       # ExtDef ExtDef FunSpecifier FunDec { Def Def int           ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 16 18                                       # ExtDef ExtDef FunSpecifier FunDec { Def Def VarSpecifier  ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 16 18 33                                    # ExtDef ExtDef FunSpecifier FunDec { Def Def VarSpecifier ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 16 18 33 55                                 # ExtDef ExtDef FunSpecifier FunDec { Def Def VarSpecifier ID ; ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 16 16                                       # ExtDef ExtDef FunSpecifier FunDec { Def Def Def           ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 16 16 21                                    # ExtDef ExtDef FunSpecifier FunDec { Def Def Def DefList   ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 16 21                                       # ExtDef ExtDef FunSpecifier FunDec { Def Def DefList       ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 16 21                                          # ExtDef ExtDef FunSpecifier FunDec { Def DefList           ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17                                             # ExtDef ExtDef FunSpecifier FunDec { DefList               ID = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 29                                          # ExtDef ExtDef FunSpecifier FunDec { DefList ID            = num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 29 44                                       # ExtDef ExtDef FunSpecifier FunDec { DefList ID =          num ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 29 44 53                                    # ExtDef ExtDef FunSpecifier FunDec { DefList ID = num      ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 29 44 49                                    # ExtDef ExtDef FunSpecifier FunDec { DefList ID = Factor   ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 29 44 50                                    # ExtDef ExtDef FunSpecifier FunDec { DefList ID = Item     ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 29 44 46                                    # ExtDef ExtDef FunSpecifier FunDec { DefList ID = AddSubExp ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 29 44 60                                    # ExtDef ExtDef FunSpecifier FunDec { DefList ID = Exp      ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 22                                          # ExtDef ExtDef FunSpecifier FunDec { DefList AssignStmt    ; ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 22 38                                       # ExtDef ExtDef FunSpecifier FunDec { DefList AssignStmt ;  ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26                                          # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt          ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 29                                       # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt ID       = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 29 44                                    # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt ID =     num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 29 44 53                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt ID = num ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 29 44 49                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt ID = Factor ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 29 44 50                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt ID = Item ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 29 44 46                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt ID = AddSubExp ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 29 44 60                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt ID = Exp ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 22                                       # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt AssignStmt ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 22 38                                    # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt AssignStmt ; ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26                                       # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt     ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 29                                    # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt ID  = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 29 44                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 29 44 53                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt ID = num ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 29 44 49                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt ID = Factor ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 29 44 50                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt ID = Item ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 29 44 46                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt ID = AddSubExp ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 29 44 60                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt ID = Exp ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 22                                    # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt AssignStmt ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 22 38                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt AssignStmt ; ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26                                    # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52                           # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81                        # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116                    # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 91                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck ID , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 88                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Factor , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 89                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Item , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 84                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck AddSubExp , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120             # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 91          # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , ID , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 88          # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Factor , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 89          # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Item , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 84          # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , AddSubExp , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87          # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120      # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91   # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91 126 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91 126 168 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( CallFunCheck ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91 126 168 91 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( CallFunCheck ID ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91 126 168 88 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( CallFunCheck Factor ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91 126 168 89 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( CallFunCheck Item ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91 126 168 84 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( CallFunCheck AddSubExp ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91 126 168 87 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( CallFunCheck Exp ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91 126 168 195 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( CallFunCheck Args ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 91 126 168 195 225 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , ID ( CallFunCheck Args ) ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 86   # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , CallStmt ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 88   # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , Factor ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 89   # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , Item ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 84   # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , AddSubExp ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 87   # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , Exp ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 87 120 153  # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Exp , Args ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 87 120 153         # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Exp , Args ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 150                # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Args ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 52 81 116 150 187            # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = ID ( CallFunCheck Args ) ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 47                           # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = CallStmt ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 49                           # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = Factor ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 50                           # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = Item ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 46                           # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = AddSubExp ; return ; } # 
0 1 1 3 9 13 17 26 26 26 29 44 60                           # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt ID = Exp ; return ; } # 
0 1 1 3 9 13 17 26 26 26 22                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt AssignStmt ; return ; } # 
0 1 1 3 9 13 17 26 26 26 22 38                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt AssignStmt ; return ; } # 
0 1 1 3 9 13 17 26 26 26 26                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt Stmt return ; } # 
0 1 1 3 9 13 17 26 26 26 26 31                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt Stmt return ; } # 
0 1 1 3 9 13 17 26 26 26 26 25                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt Stmt ReturnStmt ; } # 
0 1 1 3 9 13 17 26 26 26 26 25 40                           # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt Stmt ReturnStmt ; } # 
0 1 1 3 9 13 17 26 26 26 26 26                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt Stmt Stmt } # 
0 1 1 3 9 13 17 26 26 26 26 26 41                           # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt Stmt Stmt StmtList } # 
0 1 1 3 9 13 17 26 26 26 26 41                              # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt Stmt StmtList } # 
0 1 1 3 9 13 17 26 26 26 41                                 # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt Stmt StmtList } # 
0 1 1 3 9 13 17 26 26 41                                    # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt Stmt StmtList } # 
0 1 1 3 9 13 17 26 41                                       # ExtDef ExtDef FunSpecifier FunDec { DefList Stmt StmtList } # 
0 1 1 3 9 13 17 27                                          # ExtDef ExtDef FunSpecifier FunDec { DefList StmtList      } # 
0 1 1 3 9 13 17 27 42                                       # ExtDef ExtDef FunSpecifier FunDec { DefList StmtList }    # 
0 1 1 3 9 12                                                # ExtDef ExtDef FunSpecifier FunDec Block                   # 
0 1 1 1                                                     # ExtDef ExtDef ExtDef                                      # 
0 1 1 1 8                                                   # ExtDef ExtDef ExtDef ExtDefList                           # 
0 1 1 8                                                     # ExtDef ExtDef ExtDefList                                  # 
0 1 8                                                       # ExtDef ExtDefList                                         # 
0 2                                                         # ExtDefList                                                # 
0 4                                                         # Program                                                   # 
acc
